const std = @import("std");
const testing = std.testing;
const Allocator = std.mem.Allocator;

pub const LinearAllocator = struct {
    index: usize,
    buf: []u8,

    pub fn init(buf: []u8) !LinearAllocator {
        return LinearAllocator{
            // .ptr = child_allocator.rawAlloc(init_capacity, 8, @returnAddress()) orelse return error.OutOfMemory,
            .index = 0,
            .buf = buf,
        };
    }

    // pub fn deinit(self: *ArenaAllocator) void {
    //     // self.this_allocator.rawFree(self.ptr.*, 8, @returnAddress());
    // }

    pub fn alloc(ctx: *anyopaque, len: usize, ptr_align: u8, _: usize) ?[*]u8 {
        var self: *LinearAllocator = @ptrCast(@alignCast(ctx));

        cosnt aligned_ptr: usize = ((ptr + (usize)(ptr_align - 1)) & (usize)(-ptr_align));

        if (self.index + len > self.buf.len) {
            return null;
        }

        self.index += len;
        return &self.buf[self.index];
    }

    pub fn free(_: *anyopaque, _: []u8, _: u8, _: usize) void {}

    pub fn resize(_: *anyopaque, _: []u8, _: u8, _: usize, _: usize) bool {
        return false;
    }

    pub fn allocator(self: *LinearAllocator) Allocator {
        return .{
            .ptr = self,
            .vtable = &.{
                .alloc = alloc,
                .free = free,
                .resize = resize,
            },
        };
    }

    pub fn reset(self: *LinearAllocator) void {
        _ = self;
    }

    pub fn capacity(self: *LinearAllocator) usize {
        return self.capacity;
    }
};

test "Linear Allocator" {
    var buf: [1024]u8 = undefined;
    var linear_allocator = try LinearAllocator.init(&buf);

    var allocator = linear_allocator.allocator();

    _ = try allocator.alloc(u8, 5);
    _ = try allocator.alloc(u8, 10);
    // var list = std.ArrayList(u8).init(allocator);
    // defer list.deinit();
    //
    // list.append(1);
    //
    // testing.expect(list.items.len == 1);
    // testing.expect(list.items[0] == 1);
}
